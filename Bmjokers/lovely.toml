[manifest]
version = "1.0.4e"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = "after"
payload = '''
    if self.ability.name == 'Supergodcard' then
        local sum = 0
        for i = 1, #G.consumeables.cards do
            sum = sum + G.consumeables.cards[i].sell_cost 
        end
        self.ability.extra.suml = sum
    end

    if self.ability.name == 'Smartcowboy' then
        local smartcowboy_mult = math.floor((G.GAME.dollars + (G.GAME.dollar_buffer or 0))/self.ability.extra.perdollar)
        self.ability.extra.x_mult = 1 + self.ability.extra.perxmult * math.abs(smartcowboy_mult)
    end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "back.lua"
pattern = '''function Back:trigger_effect(args)'''
position = "after"
payload = '''
    if next(find_joker('Plasma')) and args.context == 'final_scoring_step' then
        local tot = args.chips + args.mult
        args.chips = math.floor((tot/2)^2)
        args.mult = math.floor((tot/2)^2)
        update_hand_text({delay = 0}, {mult = args.mult, chips = args.chips})
        G.E_MANAGER:add_event(Event({
            func = (function()
                local text = localize('k_balanced')
                play_sound('gong', 0.94, 0.3)
                play_sound('gong', 0.94*1.5, 0.2)
                play_sound('tarot1', 1.5)
                ease_colour(G.C.UI_CHIPS, {0.8, 0.45, 0.85, 1})
                ease_colour(G.C.UI_MULT, {0.8, 0.45, 0.85, 1})
                attention_text({
                    scale = 1.4, text = text, hold = 2, align = 'cm', offset = {x = 0,y = -2.7},major = G.play
                })
                G.E_MANAGER:add_event(Event({
                    trigger = 'after',
                    blockable = false,
                    blocking = false,
                    delay =  4.3,
                    func = (function() 
                            ease_colour(G.C.UI_CHIPS, G.C.BLUE, 2)
                            ease_colour(G.C.UI_MULT, G.C.RED, 2)
                        return true
                    end)
                }))
                G.E_MANAGER:add_event(Event({
                    trigger = 'after',
                    blockable = false,
                    blocking = false,
                    no_delete = true,
                    delay =  6.3,
                    func = (function() 
                        G.C.UI_CHIPS[1], G.C.UI_CHIPS[2], G.C.UI_CHIPS[3], G.C.UI_CHIPS[4] = G.C.BLUE[1], G.C.BLUE[2], G.C.BLUE[3], G.C.BLUE[4]
                        G.C.UI_MULT[1], G.C.UI_MULT[2], G.C.UI_MULT[3], G.C.UI_MULT[4] = G.C.RED[1], G.C.RED[2], G.C.RED[3], G.C.RED[4]
                        return true
                    end)
                }))
                return true
            end)
        }))
        delay(0.6)
        return args.chips, args.mult
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then'''
position = "before"
payload = '''
    if self.ability.name == 'Microchip' then
        local left_joker = nil
        local right_joker = nil
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then
                local index = i - 1
                local index1 = i + 1
                local index2 = index1
                local index3 = 1
                local index4 = index3
                while index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Microchip' and not G.jokers.cards[index].debuff do
                    index = index - 1
                end
                if index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Blueprint' and not G.jokers.cards[index].debuff then
                    while index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and (G.jokers.cards[index1].ability.name == 'Microchip' or G.jokers.cards[index1].ability.name == 'Blueprint') and not G.jokers.cards[index1].debuff do
                        index1 = index1 + 1
                    end
                    if index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and G.jokers.cards[index1].ability.name == 'Brainstorm' and not G.jokers.cards[index1].debuff then
                        while G.jokers.cards[index3].ability and (G.jokers.cards[index3].ability.name == 'Microchip' or G.jokers.cards[index3].ability.name == 'Blueprint') and not G.jokers.cards[index3].debuff do
                            index3 = index3 + 1
                        end
                        if G.jokers.cards[index3].ability and G.jokers.cards[index3].ability.name ~= 'Brainstorm' then
                            left_joker = G.jokers.cards[index3]
                        end
                    elseif index1 <= #G.jokers.cards and G.jokers.cards[index1].ability and G.jokers.cards[index1].ability.name ~= 'Brainstorm' then
                        left_joker = G.jokers.cards[index1]
                    end
                elseif index > 0 and G.jokers.cards[index].ability and G.jokers.cards[index].ability.name == 'Brainstorm' and not G.jokers.cards[index].debuff then
                    while G.jokers.cards[index3].ability and (G.jokers.cards[index3].ability.name == 'Microchip' or G.jokers.cards[index3].ability.name == 'Blueprint') and not G.jokers.cards[index3].debuff do
                        index3 = index3 + 1
                    end
                    if G.jokers.cards[index3].ability and G.jokers.cards[index3].ability.name ~= 'Brainstorm' then
                        left_joker = G.jokers.cards[index3]
                    end
                elseif index > 0 then
                    left_joker = G.jokers.cards[index]
                end
                while index2 <= #G.jokers.cards and G.jokers.cards[index2].ability and (G.jokers.cards[index2].ability.name == 'Microchip' or G.jokers.cards[index2].ability.name == 'Blueprint') and not G.jokers.cards[index2].debuff do
                    index2 = index2 + 1
                end
                if index2 <= #G.jokers.cards and G.jokers.cards[index2].ability and G.jokers.cards[index2].ability.name == 'Brainstorm' and not G.jokers.cards[index2].debuff then
                    while G.jokers.cards[index4].ability and (G.jokers.cards[index4].ability.name == 'Microchip' or G.jokers.cards[index4].ability.name == 'Blueprint') and not G.jokers.cards[index4].debuff do
                        index4 = index4 + 1
                    end
                    if G.jokers.cards[index4].ability and G.jokers.cards[index4].ability.name ~= 'Brainstorm' then
                        right_joker = G.jokers.cards[index4]
                    end
                elseif index2 <= #G.jokers.cards then
                    right_joker = G.jokers.cards[index2]
                end
            end
        end
        if left_joker and left_joker ~= self and left_joker.config.center.blueprint_compat then
            self.ability.leftblueprint_compat = 'compatible'
        else
            self.ability.leftblueprint_compat = 'incompatible'
        end
        if right_joker and right_joker ~= self and right_joker.config.center.blueprint_compat then
            self.ability.rightblueprint_compat = 'compatible'
        else
            self.ability.rightblueprint_compat = 'incompatible'
        end
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "set = center.set,"
position = "after"
payload = '''
retriggers = self.ability and self.ability.retriggers or 0,
'''
match_indent = true
overwrite = false