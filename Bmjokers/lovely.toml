[manifest]
version = "1.0.4h"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability and self.ability.perma_debuff then self.debuff = true end'''
position = "after"
payload = '''
    if self.ability.name == 'Supergodcard' then
        local sum = 0
        for i = 1, #G.consumeables.cards do
            sum = sum + G.consumeables.cards[i].sell_cost 
        end
        self.ability.extra.suml = sum
    end

    if self.ability.name == 'Smartcowboy' then
        local smartcowboy_mult = math.floor((G.GAME.dollars + (G.GAME.dollar_buffer or 0))/self.ability.extra.perdollar)
        self.ability.extra.x_mult = 1 + self.ability.extra.perxmult * math.abs(smartcowboy_mult)
    end

'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then'''
position = "before"
payload = '''
    if self.ability.name == 'Microchip' then
        local left_joker = nil
        local right_joker = nil
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then
                left_joker = find_left_target(i)
                right_joker = find_right_target(i)
                break
            end
        end
        if left_joker and left_joker ~= self and left_joker.config.center.blueprint_compat then
            self.ability.leftblueprint_compat = 'compatible'
        else
            self.ability.leftblueprint_compat = 'incompatible'
        end
        if right_joker and right_joker ~= self and right_joker.config.center.blueprint_compat then
            self.ability.rightblueprint_compat = 'compatible'
        else
            self.ability.rightblueprint_compat = 'incompatible'
        end
        if left_joker and left_joker ~= self and left_joker.config.center.blueprint_compat and not left_joker.ability.left_microchip then
            local left_joker_ability = shallow_copy(left_joker.ability)
            left_joker_ability.left_microchip = true
            for k, v in pairs(left_joker_ability) do
                if type(left_joker_ability[k]) == "number" and k == "retriggers" then
                    left_joker_ability[k] = left_joker_ability[k] + 1
                end
            end
            left_joker.ability = left_joker_ability
        end
        if right_joker and right_joker ~= self and right_joker.config.center.blueprint_compat and not right_joker.ability.right_microchip then
            local right_joker_ability = shallow_copy(right_joker.ability)
            right_joker_ability.right_microchip = true
            for k, v in pairs(right_joker_ability) do
                if type(right_joker_ability[k]) == "number" and k == "retriggers" then
                    right_joker_ability[k] = right_joker_ability[k] + 1
                end
            end
            right_joker.ability = right_joker_ability
        end
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i].ability.left_microchip and (G.jokers.cards[i] ~= left_joker or not left_joker) then
                local left_ability = shallow_copy(G.jokers.cards[i].ability)
                left_ability.left_microchip = nil
                for k, v in pairs(left_ability) do
                    if type(left_ability[k]) == "number" and k == "retriggers" then
                        left_ability[k] = left_ability[k] - 1
                    end
                end
                G.jokers.cards[i].ability = left_ability
                break
            end
        end
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i].ability.right_microchip and (G.jokers.cards[i] ~= right_joker or not right_joker) then
                local right_ability = shallow_copy(G.jokers.cards[i].ability)
                right_ability.right_microchip = nil
                for k, v in pairs(right_ability) do
                    if type(right_ability[k]) == "number" and k == "retriggers" then
                        right_ability[k] = right_ability[k] - 1
                    end
                end
                G.jokers.cards[i].ability = right_ability
                break
            end
        end
    end
'''
match_indent = false
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "set = center.set,"
position = "after"
payload = '''
retriggers = self.ability and self.ability.retriggers or 0,
'''
match_indent = true
overwrite = false